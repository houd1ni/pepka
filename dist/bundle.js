"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const __=function(){},isPl=e=>e===__,countArgs=e=>{let r=0;for(let t in e)!isPl(e[t])&&r++;return r},extractArgs=e=>{const r=countArgs(e),t=Array(r);for(let s=0;s<r;s++)t[s]=e[s];return t},addArgs=(e,r)=>{const t=countArgs(e),s=r.length,o={};let l=0,c=0;for(;l<t;l++)o[l]=isPl(e[l])&&c<s?r[c++]:e[l];for(;c<s;c++)o[t+c]=r[c];return o},_curry=(e,r,t)=>{const s=countArgs(r),o=e.length-s-t.length;return o<1?e(...extractArgs(addArgs(r,t)),...t.slice(-o)):(...s)=>_curry(e,addArgs(r,t),s)},curry=e=>(...r)=>_curry(e,{},r),undef=void 0,nul=null,to=e=>typeof e,isNull=e=>e===nul,isUndef=e=>e===undef,isNum=e=>"number"==to(e),isArray=e=>Array.isArray(e),isObjArr=e=>"object"==to(e)&&!isNull(e),equals=curry((e,r)=>{if("object"==to(e)&&"object"==to(r)){if(isNull(e)||isNull(r))return e===r;for(let t of[e,r])for(let s in t)if(!equals(e[s],r[s]))return!1}return e===r}),ifElse=curry((e,r,t,s)=>e(s)?r(s):t(s)),when=curry((e,r,t)=>ifElse(e,r,identity,t)),compose=(...e)=>r=>{for(let t=length(e)-1;t>-1;t--)r=e[t](r);return r},flip=e=>curry((r,t)=>e(t,r)),isNil=e=>isNull(e)||isUndef(e),length=e=>e.length,always=e=>()=>e,identity=e=>e,trim=e=>e.trim(),head=e=>e[0],tail=e=>e.slice(1),last=e=>e[e.length-1],complement=e=>r=>!e(r),keys=e=>Object.keys(e),values=e=>Object.values(e),toPairs=e=>Object.entries(e),tap=e=>r=>(e(r),r),explore=(e,r="log")=>tap(t=>console[r](e,t)),slice=curry((e,r,t)=>t.slice(e,isNum(r)?r:1/0)),assoc=curry((e,r,t)=>({...t,[e]:r})),prop=curry((e,r)=>r[e]),pathOr=curry((e,r,t)=>ifElse(length,compose(ifElse(isNil,always(e),t=>pathOr(e,slice(1,nul,r),t)),flip(prop)(t),head),always(t))(r)),path=pathOr(undef),clone=e=>{switch(to(e)){case"object":switch(type(e)){case"Null":return e;case"Array":return map(clone,e);case"Object":const r={};for(let t in e)r[t]=clone(e[t]);return r}default:return e}},pick=curry((e,r)=>reduce((e,t)=>e[t]=r[t],{},e)),reduce=curry((e,r,t)=>t.reduce(e,clone(r))),fromPairs=e=>reduce((e,r)=>assoc(...r,e),{},e),join=curry((e,r)=>r.join(e)),map=curry((e,r)=>r.map(e)),forEach=curry((e,r)=>r.forEach(e)),both=curry((e,r,t)=>r(t)&&e(t)),type=e=>{const r=to(e);return"object"==r?isArray(e)?"Array":isNull(e)?"Null":"Object":r[0].toUpperCase()+r.slice(1)},isEmpty=e=>{switch(type(e)){case"String":return""==e;case"Array":return 0==length(e);case"Null":return!1;case"Object":return 0==length(Object.keys(e));default:return!1}},replace=curry((e,r,t)=>t.replace(e,r)),filter=curry((e,r)=>ifElse(compose(equals("Array"),type),r=>r.filter(e),compose(fromPairs,filter(([r,t])=>e(t,r)),toPairs))(r)),memoize=e=>{let r,t=!1;return()=>t?r:(t=!0,r=e())},mergeShallow=curry((e,r)=>Object.assign({},e,r)),mergeDeep=curry((e,r)=>{for(let t in r)switch(type(r[t])){case"Array":case"Object":if(isObjArr(r[t])){mergeDeep(e[t],r[t]);break}default:e[t]=r[t]}return e}),mapKeys=curry((e,r)=>compose(fromPairs,filter(complement(isNil)),map(([r,t])=>isNull(e[r])?nul:[e[r]||r,t]),toPairs)(r)),forEachSerial=(()=>{const e=async(r,t,s)=>{s<t.length&&(await r(t[s]),await e(r,t,++s))};return curry((r,t)=>e(r,t,0))})(),waitAll=e=>Promise.all(e),forEachAsync=curry((e,r)=>Promise.all(r.map(e))),composeAsync=(()=>{const e=async(r,t,s)=>~s?await e(r,await r[s](t),--s):t;return(...r)=>t=>e(r,t,r.length-1)})();exports.__=__,exports.always=always,exports.assoc=assoc,exports.both=both,exports.clone=clone,exports.complement=complement,exports.compose=compose,exports.composeAsync=composeAsync,exports.curry=curry,exports.equals=equals,exports.explore=explore,exports.filter=filter,exports.flip=flip,exports.forEach=forEach,exports.forEachAsync=forEachAsync,exports.forEachSerial=forEachSerial,exports.fromPairs=fromPairs,exports.head=head,exports.identity=identity,exports.ifElse=ifElse,exports.isEmpty=isEmpty,exports.isNil=isNil,exports.join=join,exports.keys=keys,exports.last=last,exports.length=length,exports.map=map,exports.mapKeys=mapKeys,exports.memoize=memoize,exports.mergeDeep=mergeDeep,exports.mergeShallow=mergeShallow,exports.path=path,exports.pathOr=pathOr,exports.pick=pick,exports.prop=prop,exports.reduce=reduce,exports.replace=replace,exports.slice=slice,exports.tail=tail,exports.tap=tap,exports.toPairs=toPairs,exports.trim=trim,exports.type=type,exports.values=values,exports.waitAll=waitAll,exports.when=when;
