const r=r=>typeof r,e=r=>null===r,t=(n,c)=>{if("object"===r(n)&&"object"===r(c)){if(e(n)||e(c))return n===c;for(let r of[n,c])for(let e in r)if(!t(n[e],c[e]))return!1}},n=(r,e,t)=>(e.push(...t),e.length<r.length?(...t)=>n(r,e,t):r(...e,...t)),c=r=>(...e)=>n(r,[],e),l=c((r,e,t)=>r(t)?e(t):t),o=(...r)=>e=>{for(let t=s(r)-1;t>-1;t--)e=r[t](e);return e},u=c(t),a=r=>Array.isArray(r),i=r=>e(r)||(r=>void 0===r)(r),s=r=>r.length,f=r=>()=>r,j=()=>r=>r,p=r=>r.trim(),b=c((r,e)=>e.join(r)),h=r=>e=>!r(e),y=c((r,e)=>e.map(r)),g=c((r,e)=>e.filter(r)),A=c((r,e)=>e.forEach(r)),O=c((r,e,t)=>e(t)&&r(t)),d=t=>{const n=r(t);return"object"==n?a(t)?"Array":e(t)?"Null":"Object":n[0].toUpperCase()+n.slice(1)},m=r=>{switch(d(r)){case"String":return""==r;case"Array":return 0==s(r);case"Null":return!1;case"Object":return 0==s(Object.keys(r));default:return!1}},N=c((r,e,t)=>t.replace(r,e));export{f as always,O as both,h as complement,o as compose,c as curry,u as equals,g as filter,A as forEach,j as identity,a as isArray,m as isEmpty,i as isNil,b as join,s as length,y as map,N as replace,p as trim,d as type,l as when};
