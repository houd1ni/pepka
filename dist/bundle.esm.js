const e=e=>typeof e,r=e=>null===e,t=r=>"number"==e(r),n=(e,r,t)=>r.length+t.length<e.length?(...t)=>n(e,[...r,...t],t):e(...r,...t),l=e=>(...r)=>n(e,r,[]),c=l((t,n)=>{if("object"==e(t)&&"object"==e(n)){if(r(t)||r(n))return t===n;for(let e of[t,n])for(let r in e)if(!c(t[r],n[r]))return!1}return t===n}),a=l((e,r,t,n)=>e(n)?r(n):t(n)),s=l((e,r,t)=>a(e,r,j,t)),u=(...e)=>r=>{for(let t=f(e)-1;t>-1;t--)r=e[t](r);return r},o=e=>l((r,t)=>e(t,r)),i=e=>r(e)||(e=>void 0===e)(e),f=e=>e.length,b=e=>()=>e,j=e=>e,h=e=>e.trim(),y=e=>e[0],g=e=>e[e.length-1],O=e=>r=>!e(r),p=e=>Object.keys(e),w=e=>Object.values(e),m=e=>Object.entries(e),A=e=>r=>(e(r),r),d=(e,r="log")=>A(t=>console[r](e,t)),v=l((e,r,n)=>n.slice(e,t(r)?r:1/0)),N=l((e,r,t)=>({...t,[e]:r})),k=l((e,r)=>r[e]),P=l((e,r,t)=>a(f,u(a(i,b(e),t=>P(e,v(1,null,r),t)),o(k)(t),y),b(t))(r)),x=P(void 0),C=r=>{switch(e(r)){case"object":switch(D(r)){case"Null":return r;case"Array":return q(C,r);case"Object":const e={};for(let t in r)e[t]=C(r[t]);return e}default:return r}},E=l((e,r,t)=>t.reduce(e,C(r))),S=e=>E((e,r)=>N(...r,e),{},e),U=l((e,r)=>r.join(e)),q=l((e,r)=>r.map(e)),z=l((e,r)=>r.forEach(e)),B=l((e,r,t)=>r(t)&&e(t)),D=t=>{const n=e(t);return"object"==n?(e=>Array.isArray(e))(t)?"Array":r(t)?"Null":"Object":n[0].toUpperCase()+n.slice(1)},F=u(c("Object"),D),G=e=>{switch(D(e)){case"String":return""==e;case"Array":return 0==f(e);case"Null":return!1;case"Object":return 0==f(Object.keys(e));default:return!1}},H=l((e,r,t)=>t.replace(e,r)),I=l((e,r)=>a(u(c("Array"),D),r=>r.filter(e),u(S,I(([r,t])=>e(t,r)),m))(r)),J=e=>{let r,t=!1;return()=>t?r:(t=!0,r=e())},K=(e,r)=>{for(let t in r)F(e[t])&&F(r[t])?K(e[t],r[t]):e[t]=r[t];return e},L=l((e,t)=>u(S,I(O(i)),q(([t,n])=>r(e[t])?null:[e[t]||t,n]),m)(t)),M=(()=>{const e=async(r,t,n)=>{n<t.length&&(await r(t[n]),await e(r,t,++n))};return l((r,t)=>e(r,t,0))})(),Q=e=>Promise.all(e),R=l((e,r)=>Promise.all(r.map(e))),T=(()=>{const e=async(r,t,n)=>~n?await e(r,await r[n](t),--n):t;return(...r)=>t=>e(r,t,r.length-1)})();export{b as always,N as assoc,B as both,C as clone,O as complement,u as compose,T as composeAsync,l as curry,K as deepMerge,c as equals,d as explore,I as filter,o as flip,z as forEach,R as forEachAsync,M as forEachSerial,S as fromPairs,y as head,j as identity,a as ifElse,G as isEmpty,i as isNil,U as join,p as keys,g as last,f as length,q as map,L as mapKeys,J as memoize,x as path,P as pathOr,k as prop,E as reduce,H as replace,v as slice,A as tap,m as toPairs,h as trim,D as type,w as values,Q as waitAll,s as when};
